/*
 Copyright 2021 The GoPlus Authors (goplus.org)
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
     http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/

// +build ignore

// -----------------------------------------------------------------------------

type ninteger interface {
    type int, int64, int32, int16, int8, uint, uintptr, uint64, uint32, uint16, uint8
}

type integer interface {
    ninteger
}

type float interface {
    type float32, float64
}

type number interface { // - * /
    integer
    float
    type complex64, complex128
}

type addable interface { // +
    number
    type string
}

type orderable interface { // < <= > >=
    integer
    float
    type string
}

type comparable interface { // == !=
    addable
    type bool, interface, pointer, array, chan, struct
    // slice/map/func is very special, can only be compared to nil
}

func [T addable] (a T) + (b T) T    // func gopo_Add[T addable](a, b T) T
func [T number] (a T) - (b T) T     // func gopo_Sub[T number](a, b T) T
func [T number] (a T) * (b T) T     // func gopo_Mul[T number](a, b T) T
func [T number] (a T) / (b T) T     // func gopo_Quo[T number](a, b T) T
func [T integer] (a T) % (b T) T    // func gopo_Rem[T integer](a, b T) T

func [T integer] (a T) | (b T) T    // func gopo_Or[T integer](a, b T) T
func [T integer] (a T) ^ (b T) T    // func gopo_Xor[T integer](a, b T) T
func [T integer] (a T) & (b T) T    // func gopo_And[T integer](a, b T) T
func [T integer] (a T) &^ (b T) T   // func gopo_AndNot[T integer](a, b T) T

func [T integer, N ninteger] (a T) << (n N) T // func gopo_Lsh[T integer, N ninteger](a T, n N) T
func [T integer, N ninteger] (a T) >> (n N) T // func gopo_Rsh[T integer, N ninteger](a T, n N) T

func [T orderable] (a T) < (b T) bool   // func gopo_LT[T orderable](a, b T) bool
func [T orderable] (a T) <= (b T) bool  // func gopo_LE[T orderable](a, b T) bool
func [T orderable] (a T) > (b T) bool   // func gopo_GT[T orderable](a, b T) bool
func [T orderable] (a T) >= (b T) bool  // func gopo_GE[T orderable](a, b T) bool

func [T comparable] (a T) == (b T) bool // func gopo_EQ[T comparable](a, b T) bool
func [T comparable] (a T) != (b T) bool // func gopo_NE[T comparable](a, b T) bool

func [T number] -(a T) T    // func gopo_Neg[T number](a T) T
func [T integer] ^(a T) T   // func gopo_Not[T integer](a T) T

// -----------------------------------------------------------------------------

type any interface {
}

type capable interface {
    type slice, chan, array, array_pointer
}

type lenable interface {
    capable
    type map
}

type makable interface {
    type slice, chan, map
}

func [Type any] copy(dst, src []Type) int
func [Type any] close(c chan<- Type)

func [Type lenable] len(v Type) int
func [Type capable] cap(v Type) int

// new & make are special cases, they require to pass a type.
func [] new(T any) *T
func [N ninteger] make(Type makable, size ...N) Type

// As a special case, it is legal to append a string to a byte slice, like this:
//	slice = append([]byte("hello "), "world"...)
func [Type any] append(slice []Type, elems ...Type) []Type

func complexFlt32(r, i float32) complex64
func complexFlt64(r, i float64) complex128
func complex = (
    complexFlt32
    complexFlt64
)

func realComplex64(c complex64) float32
func realComplex128(c complex128) float64
func real = (
    realComplex64
    realComplex128
)

func imagComplex64(c complex64) float32
func imagComplex128(c complex128) float64
func imag = (
    imagComplex64
    imagComplex128
)

func [Key comparable, Elem any] delete(m map[Key]Elem, key Key)

func panic(v interface{})
func recover() interface{}

func print(args ...interface{})
func println(args ...interface{})

// -----------------------------------------------------------------------------
